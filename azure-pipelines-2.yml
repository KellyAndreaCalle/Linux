trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        steps:
          - task: UseNode@1
            inputs:
              version: '16.x'
            displayName: 'Install Node.js'
          - script: |
              npm install
              npm run build --if-present
              npm run test --if-present
            displayName: 'npm install, build and test'
          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true
          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: WebApp

  - stage: Deploy
    displayName: Deploy stage
    jobs:
      - deployment: VMDeploy
        displayName: Web deploy
        environment:
          name: Maquina_Linux
          resourceType: VirtualMachine
          tags: web # Update value for VMs to deploy to
        strategy:
          rolling:
            maxParallel: 2  # for percentages, mention as x%
            preDeploy:
              steps:
                - download: current
                  artifact: WebApp
                - script: echo initialize, cleanup, backup, install certs
            deploy:
              steps:
                - task: Bash@3
                  inputs:
                    targetType: 'inline'
                    script: |
                      # Extraer el contenido del archivo .zip
                      unzip $(Pipeline.Workspace)/WebApp/*.zip -d $(Pipeline.Workspace)/WebApp

                      # Listar los archivos del directorio para entender la estructura
                      echo "Listando archivos del directorio:"
                      ls -l $(Pipeline.Workspace)/WebApp

                      # Navegar al directorio de la aplicaci칩n y ejecutar el servidor en segundo plano
                      cd $(Pipeline.Workspace)/WebApp
                      npm install
                      nohup node server.js &

                      # Comprobar si el servidor se est치 ejecutando
                      echo "Aplicaci칩n desplegada y ejecut치ndose en segundo plano"
            routeTraffic:
              steps:
                - script: echo routing traffic
            postRouteTraffic:
              steps:
                - script: echo health check post-route traffic
            on:
              failure:
                steps:
                  - script: echo Restore from backup! This is on failure
              success:
                steps:
                  - script: echo Notify! This is on success
